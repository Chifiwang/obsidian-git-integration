/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var DEFAULT_SETTINGS = {
  vaultPath: "",
  saveSchema: 0,
  saveDepth: 0,
  n_max: 2,
  n_curr: 0
};
var SAVE_SCHEMA = {
  onMajSave: 0,
  onSave: 1,
  onClose: 2,
  wholeVault: 0,
  fileOnly: 1,
  parentDir: 2
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const VAULT_PATH = this.app.vault.adapter.getBasePath();
    this.settings.vaultPath = VAULT_PATH;
    this.saveSettings();
    var gitCmd = `git -C "${this.settings.vaultPath}" push`;
    this.runGit(gitCmd);
    var gitCmd = `git -C "${this.settings.vaultPath}" pull`;
    this.runGit(gitCmd);
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file.extension === "md") {
          this.onFileSave(file);
        }
      })
    );
    this.addCommand({
      id: "git-add",
      name: "git add",
      editorCallback: (editor, view) => {
        const file = view.file;
        var gitCmd2 = `git -C "${path.join(this.settings.vaultPath, path.dirname(file.path))}" add "${file.name}"`;
        this.runGit(gitCmd2);
      }
    });
    this.addCommand({
      id: "git-push",
      name: "git push",
      editorCallback: (editor, view) => {
        var gitCmd2 = `git -C "${this.settings.vaultPath}" push`;
        this.runGit(gitCmd2);
      }
    });
    this.addCommand({
      id: "git-pull",
      name: "git pull",
      editorCallback: (editor, view) => {
        var gitCmd2 = `git -C "${this.settings.vaultPath}" pull`;
        this.runGit(gitCmd2);
      }
    });
    this.addCommand({
      id: "git-commit",
      name: "git commit",
      editorCallback: (editor, view) => {
        new InputModal(this.app, (result) => {
          const gitCmd2 = `git -C "${this.settings.vaultPath}" commit -m "${result}"`;
          this.runGit(gitCmd2);
        }, "Commit Message").open();
      }
    });
    this.addCommand({
      id: "git-command",
      name: "git command",
      editorCallback: (editor, view) => {
        new InputModal(this.app, (result) => {
          const gitCmd2 = `git -C "${this.settings.vaultPath}" ${result}`;
          this.runGit(gitCmd2);
        }, "Command").open();
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
    var gitCmd = `git -C "${this.settings.vaultPath}"`;
    var gitCommitPush = ` && ${gitCmd} commit -m "automated commit" && ${gitCmd} push`;
    var fullCmd = `${gitCmd} add . ${gitCommitPush}`;
    this.runGit(fullCmd);
    console.log("Tried to Push Changes to Remote");
  }
  async runGit(gitCmd) {
    const { exec } = require("child_process");
    exec(gitCmd, (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
        return;
      }
      console.log(`stdout: ${stdout}`);
      console.error(`stderr: ${stderr}`);
    });
  }
  async onFileSave(file) {
    var fullCmd = "";
    if (this.settings.saveDepth === SAVE_SCHEMA.wholeVault) {
      var gitCmd = `git -C "${this.settings.vaultPath}"`;
    } else {
      var gitCmd = `git -C "${path.join(this.settings.vaultPath, path.dirname(file.path))}"`;
    }
    if (this.settings.saveDepth === SAVE_SCHEMA.fileOnly) {
      var gitAdd = ` add "${file.name}"`;
    } else {
      var gitAdd = " add .";
    }
    fullCmd = gitCmd + gitAdd;
    if (this.settings.saveSchema === SAVE_SCHEMA.onMajSave) {
      this.settings.n_curr += 1;
      if (this.settings.n_curr === this.settings.n_max) {
        this.settings.n_curr = 0;
        var gitCommitPush = ` && ${gitCmd} commit -m "automated commit" && ${gitCmd} push`;
      }
    } else if (this.settings.saveSchema === SAVE_SCHEMA.onSave) {
      var gitCommitPush = ` && ${gitCmd} commit -m "automated commit" && ${gitCmd} push`;
    } else {
      var gitCommitPush = "";
    }
    fullCmd += gitCommitPush;
    this.runGit(fullCmd);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    console.log(this.settings);
  }
};
var InputModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit, placeholderString) {
    super(app);
    this.onSubmit = onSubmit;
    this.placeholder_str = placeholderString;
  }
  onOpen() {
    var _a, _b;
    const { modalEl, contentEl } = this;
    (_a = modalEl.querySelector(".modal-close-button")) == null ? void 0 : _a.remove();
    (_b = modalEl.querySelector(".modal-header")) == null ? void 0 : _b.remove();
    modalEl.addClass("cmd-input");
    const inputEl = contentEl.createEl("input", {
      type: "text",
      placeholder: this.placeholder_str
    });
    inputEl.style.width = "100%";
    inputEl.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        this.close();
        this.onSubmit(inputEl.value);
      }
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Git Repository Location").setDesc("Sets the Git Repository Directiory").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.vaultPath).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Save Schema").setDesc("Sets the push frequency").addDropdown((dropdown) => dropdown.addOption(SAVE_SCHEMA.onMajSave, "On Major Save").addOption(SAVE_SCHEMA.onSave, "Every Save").addOption(SAVE_SCHEMA.onClose, "Only On Close").setValue(this.plugin.settings.saveSchema).onChange(async (value) => {
      this.plugin.settings.saveSchema = parseInt(value, 10);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Save Depth").setDesc("Sets the commit depth").addDropdown((dropdown) => dropdown.addOption(SAVE_SCHEMA.wholeVault, "Whole Vault").addOption(SAVE_SCHEMA.fileOnly, "Current File").addOption(SAVE_SCHEMA.ParentDir, "Current Directory").setValue(this.plugin.settings.saveDepth).onChange(async (value) => {
      this.plugin.settings.saveDepth = parseInt(value, 10);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Major Save Frequency").setDesc("A major save is considered after n updates to any files").addSlider((slider) => slider.setDynamicTooltip(this.plugin.settings.n_max).onChange(async (value) => {
      this.plugin.settings.n_max = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
